# Ryan's
# 1. Group raw input into an array of pairs of points
def group_into_points(ar)
  points = []
  point = []
  until ar.empty?
    if point.size == 2
      points.push(point)
      point = []
    else
      point.push(ar.shift)
    end
  end
  points.push(point)
  points
end

# 2. Merge sort resulting array based on x value
def merge(left, right, i)
  sorted = []
  reference = i == 3 ? 1 : 0
  while !left.empty? && !right.empty?
    if left.first[reference] < right.first[reference] || right.empty?
      sorted.push(left.shift)
    elsif right.first[reference] <= left.first[reference] || left.empty?
      sorted.push(right.shift)
    end
  end
  right.each { |el| sorted.push(el) } unless right.empty?
  left.each { |el| sorted.push(el) } unless left.empty?
  sorted
end

def merge_sort(ar, i)
  return ar if ar.size < 2

  mid = (ar.size - 1) / 2
  left = merge_sort(ar.slice(0..mid), i)
  right = merge_sort(ar.slice(mid + 1..-1), i)
  merge(left, right, i)
end

def smallest_diff(ar)
  pair = []
  min_diff = Float::INFINITY
  ar.each_with_index do |el, i|
    if process_pairs(el, ar[i - 1]) < min_diff
      min_diff = process_pairs(el, ar[i - 1])
      pair = [ar[i - 1], el]
    end
  end
  process_pairs(pair[0], pair[1]).round(6)
  # pair
end

def process_pairs(ar1, ar2)
  Math.sqrt((ar1[0] - ar2[0])**2 + (ar1[1] - ar2[1])**2).round(6)
end

def do_stuff(ar, i)
  puts smallest_diff(merge_sort(group_into_points(ar), i))
end

inputs = [
  "
  0.8239934173914427 0.1319694539175018 0.8342200042902134 0.7131084191082707 0.09916950054781792 0.06385940977543703 0.9728160689903603 0.9866024736887545 0.9894053123073387 0.3231668870036569 0.6921178364907058 0.4819960661900089 0.08838176109695095 0.7032698234535882 0.22954065151820313 0.9502101028876844 0.5391591247928582 0.6384250501809671 0.9814608698617646 0.5369293900667655
  ",
  "0.6388044987085864 0.12321774889011616 0.7631735419761853 0.26690298233789356 0.7745298089998389 0.5709748672482575 0.815971852489384 0.05716225723290613 0.41977191515203693 0.5915341024187767 0.8708500428192745 0.3462113786239953 0.9562543197505027 0.31021716148750955 0.7613848370934122 0.21684706202511406 0.08675924520112632 0.5578024766082902 0.1817101693411829 0.06447737794915154 0.035445499160458915 0.9052005981073605 0.7839302243682793 0.390514225004304 0.6262267054556485 0.7289380529134011 0.3800485831811793 0.13098403792719426 0.7177560573536871 0.632919551816227 0.6258853176841744 0.4830335589619992 0.5292277166859669 0.8966652907009216 0.2607429328638633 0.8023598089749073 0.9781191114964698 0.746196135312332 0.7041214718498525 0.03619356668497009",
  "0.07068947851702245 0.7049030734189116 0.5271355730467748 0.7119045648345351 0.8541630702047155 0.8742281745109283 0.9663606898917478 0.46655303771864354 0.04235501612634274 0.25826525258840705 0.897602974999944 0.878601619435097 0.7629456846567608 0.004452021851293897 0.6661638277883088 0.5157242241549581 0.086693834108299 0.0935474809760809 0.9946628789462715 0.9964677526180209 0.9556096423450852 0.3581123324527731 0.1709368418851248 0.1786490531515863 0.19867211666050955 0.8069252258456038 0.5550047268229857 0.6587691476210713 0.40794864084336135 0.9210150217617465 0.4421166384244354 0.23494062965601736 0.5778569853318665 0.7246837738299594 0.27691235155490435 0.07664519110369161 0.4464434469293117 0.7288415045207469 0.5779726619722645 0.0917081865014241 0.4199326913582836 0.2941684861990843 0.7025549096556704 0.38419733063142536 0.8104386828229054 0.5680659112676646 0.758062030505403 0.7565233836548048 0.8716081489453191 0.9120519618655301 0.549801485796643 0.924840417490599 0.7781012079669789 0.6552047626306134 0.44384930905770403 0.4889142707896563 0.2621966176433167 0.08444923152648676 0.4193412289522749 0.7259472866338981",
  "0.4799845404716546 0.8312002276859107 0.0551746041760236 0.6752881941586123 0.2818261198594725 0.17615822153982597 0.5022684810526742 0.5298086073869323 0.7968523470632254 0.1810677046594078 0.650999647666432 0.1740062568460441 0.3253156178590283 0.2565225515524119 0.9403256236380109 0.053391734350819564 0.36198788203532617 0.401157669991665 0.2411662785797939 0.5801866366993061 0.3332000676944663 0.09903641177801648 0.5816828822463483 0.6896854392183376 0.4882860254299275 0.7054044082346991 0.3682858303790776 0.5130502301709932 0.08535423595388769 0.21585922520948042 0.41075075649176673 0.9995770845999704 0.9185370334222841 0.07277562416388494 0.23267517168974283 0.9708862076889083 0.922343250077418 0.45286406568670856 0.6026085473101725 0.27015254972990754 0.058467431314136675 0.3010300188419851 0.9565407744410878 0.3814070031041442 0.9413846302819149 0.22824027648707512 0.39903536737923506 0.13710327812722733 0.6912870839812346 0.2748915218070106 0.2681455039903018 0.9065587515193771 0.31639471395814467 0.4562158150043173 0.8283520163616767 0.9635419092601933 0.5213990498314421 0.952546249464031 0.5161148164479042 0.568193689818363 0.21477573028204622 0.7848053731069393 0.3042302217887266 0.6666328092316172 0.1449280531945969 0.8243683230909926 0.17403815807886935 0.011010590908076545 0.03360002492557157 0.026490609614503335 0.3886254819049412 0.933443938437829 0.29472435256373675 0.8477811604310443 0.2455221551405693 0.9691694405206785 0.9278472977279477 0.9107387903519912 0.25398961641042506 0.017426006140759287 0.45749862354202797 0.11216014331343194 0.22985157529635047 0.7529867032582358 0.8533515394773672 0.5372661647700332 0.6299192688722389 0.5569254467632209 0.21074467116791296 0.7376829698016564 0.5584146564164558 0.32211749848608573 0.5971134040040796 0.15895206911738025 0.26939692122644443 0.10713723490212135 0.8771059704524208 0.7620342266103062 0.662048657245237 0.7616306974816445"
].map { |str| str.split(" ").map(&:to_f) }

inputs.each_with_index { |input, i| do_stuff(input, i) }
