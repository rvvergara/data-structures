tree = [2,7,5,2,6,0,9,0,0,5,11, 0, 0, 4, 0  ]
        0 1 2 3 4 5 6 7 8 9 10  11 12 13 14

heights = [0,1,0,0,1,1,0,0,2,0,2,1,3,3,4]

height of any subtree = 1 + maximum(left height, right)

heights = [0,1,0,0,1,1,0,0,2,0,2,1,3,3,4] ->
heights.length = 14	   

i = 0, element = 2
* if in tree array if 2*i + 1 is nil then left_height_index is also nil
* if in tree array if 2*i + 2 is nil then right_height_index is also nil


initial_height = tree[i] == 0 ? 0 : 1 = 1


left_height_index = tree[2*i + 1].nil? ? nil : heights.length - i - 1 = 13
right_height_index =  =>  tree[2*i + 2].nil? nil : left_height_index - 1 = 12 

left_height = heights[nil].nil? ? 0 : heights[left_height_index] = 3
right_height = heights[nil].nil? ? 0 : heights[right_height_index] = 3

total height = 1 + max(3,3) = 4



tree = [2,7,5,2,6,0,9,0,0,5,11, 0, 0, 4, 0  ]
        0 1 2 3 4 5 6 7 8 9 10  11 12 13 14

tree1 = [2,7,5,2,6,0,9]

do_stuff(tree,index)

height of any subtree = 1 + max of (left_child,right_child) unless subtree is nil or zero

height of 2 = 1 + Max(height of 7, height of 5) = 3

height of 7 = 1 + Max(height of 2',height of 6) = 2

height of 5 = 1 + Max(height of 0, height of 9) = 2

height of 2' = 1 + 0 = 1

height of 6 = 1 + 0

height of 0 = 0

height of 9 = 1 + 0


Call Stack = []

heights = [dos(arr,0),]


